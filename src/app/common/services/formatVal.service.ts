import {Injectable} from '@angular/core';

@Injectable({
    providedIn: 'root'
})

export class FormatValService {
    VALIDATE_IP = /^(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
    VALIDATE_NET_MASKS = [
        '0.0.0.0',
        '128.0.0.0',
        '192.0.0.0',
        '224.0.0.0',
        '240.0.0.0',
        '248.0.0.0',
        '252.0.0.0',
        '254.0.0.0',
        '255.0.0.0',
        '255.128.0.0',
        '255.192.0.0',
        '255.224.0.0',
        '255.240.0.0',
        '255.248.0.0',
        '255.252.0.0',
        '255.254.0.0',
        '255.255.0.0',
        '255.255.128.0',
        '255.255.192.0',
        '255.255.224.0',
        '255.255.240.0',
        '255.255.248.0',
        '255.255.252.0',
        '255.255.254.0',
        '255.255.255.0',
        '255.255.255.128',
        '255.255.255.192',
        '255.255.255.224',
        '255.255.255.240',
        '255.255.255.248',
        '255.255.255.252',
        '255.255.255.254',
        '255.255.255.255'
    ];

    constructor() {
    }

    // Returns true to ip format error
    validateIp(ip) {
        if (!ip.match(this.VALIDATE_IP)) {
            return true;
        } else {
            let lst = ip.split('.');
            lst = lst.map(function (n) {
                return parseInt(n);
            });
            //A类地址范围:   1.0.0.1—126.255.255.254
            //B类地址范围：128.0.0.1—191.255.255.254
            //C类地址范围：192.0.0.1—223.255.255.254
            // --暂不考虑 D类地址范围：224.0.0.1—239.255.255.254
            // --暂不考虑 E类地址范围：240.0.0.1—255.255.255.254
            if (lst[0] === 0 || lst[0] === 127 || lst[0] > 223) {
                return true;
            }
            if (ip === '126.255.255.255' || ip === '128.0.0.0' || ip === '191.255.255.255' || ip === '192.0.0.0' || ip === '223.255.255.255') {
                return true;
            }
        }
        return false;
    }

    // Returns true to netMask format error
    validateNetMask(netMask) {
        return !this.VALIDATE_NET_MASKS.includes(netMask);
    }

    getIPReg() {
        return this.VALIDATE_IP;
    }

}
